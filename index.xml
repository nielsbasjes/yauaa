<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Yauaa: Yet Another UserAgent Analyzer | Yauaa - Yet Another UserAgent Analyzer</title><link>/index.html</link><description>This is a java library that tries to parse and analyze the useragent string (and when available the User-Agent Client Hints) and extract as many relevant attributes as possible.</description><generator>Hugo</generator><language>en-us</language><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>What to expect</title><link>/expect/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/expect/index.html</guid><description>This library extracts as many as possible fields from the provided User-Agent value and (if available) the provided Client Hints.
As an example the useragent of my phone (from a while ago):
Mozilla/5.0 (Linux; Android 7.0; Nexus 6 Build/NBD90Z) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.124 Mobile Safari/537.36 is converted into this set of fields:
Field name Value Device Class Phone Device Name Google Nexus 6 Device Brand Google Operating System Class Mobile Operating System Name Android Operating System Version 7.0 Operating System Name Version Android 7.0 Operating System Version Build NBD90Z Layout Engine Class Browser Layout Engine Name Blink Layout Engine Version 53.0 Layout Engine Version Major 53 Layout Engine Name Version Blink 53.0 Layout Engine Name Version Major Blink 53 Agent Class Browser Agent Name Chrome Agent Version 53.0.2785.124 Agent Version Major 53 Agent Name Version Chrome 53.0.2785.124 Agent Name Version Major Chrome 53</description></item><item><title>Using the analyzer</title><link>/using/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/using/index.html</guid><description>Using the analyzer To use this analyzer you can use it either directly in your Java based applications or use one of the User Defined Functions that are available for many of Apache bigdata tools (Hive, Flink, Beam, â€¦) as described here.
Using in Java applications To use the library you must first add it as a dependency to your application. The library has been published to maven central so that should work in almost any environment.</description></item><item><title>User Defined Functions</title><link>/udf/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/udf/index.html</guid><description>Several external computation systems support the concept of a User Defined Function (UDF). A UDF is simply a way of making functionality (in this case the analysis of useragents) available in such a system.
For several systems (tools used within bol.com (where I work)) I have written such a UDF which are all part of this project.
Apache Beam Apache Beam SQL Apache Drill Apache Flink Apache Flink Table/SQL Apache Hive Apache Nifi Apache Pig Commandline usage Elastic LogStash Elastic Search LogParser Snowflake Snowplow Trino</description></item><item><title>Development</title><link>/developer/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/developer/index.html</guid><description>These pages explain the internals of the system and contains the guidelines on how to extend it with your own rules.
Building from source Base Design Making new rules Shading dependencies Reporting issues</description></item><item><title>Other</title><link>/other/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/other/index.html</guid><description>Blogpost Related projects</description></item></channel></rss>