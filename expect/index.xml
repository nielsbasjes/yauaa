<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>What to expect | Yauaa - Yet Another UserAgent Analyzer</title><link>/expect/index.html</link><description>This library extracts as many as possible fields from the provided User-Agent value and (if available) the provided Client Hints.
As an example the useragent of my phone (from a while ago):
Mozilla/5.0 (Linux; Android 7.0; Nexus 6 Build/NBD90Z) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.124 Mobile Safari/537.36 is converted into this set of fields:
Field name Value Device Class Phone Device Name Google Nexus 6 Device Brand Google Operating System Class Mobile Operating System Name Android Operating System Version 7.0 Operating System Name Version Android 7.0 Operating System Version Build NBD90Z Layout Engine Class Browser Layout Engine Name Blink Layout Engine Version 53.0 Layout Engine Version Major 53 Layout Engine Name Version Blink 53.0 Layout Engine Name Version Major Blink 53 Agent Class Browser Agent Name Chrome Agent Version 53.0.2785.124 Agent Version Major 53 Agent Name Version Chrome 53.0.2785.124 Agent Name Version Major Chrome 53</description><generator>Hugo</generator><language>en-us</language><atom:link href="/expect/index.xml" rel="self" type="application/rss+xml"/><item><title>Field values</title><link>/expect/fieldvalues/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/expect/fieldvalues/index.html</guid><description>Output fields The resulting output fields can be classified into several categories:
The Device: The hardware that was used. The Operating System: The base software that runs on the hardware The Layout Engine: The underlying core that converts the ‘HTML’ into a visual/interactive The Agent: The actual “Browser” that was used. Extra fields: In some cases we have additional fields to describe the agent. These fields are among others specific fields for the Facebook and Kobo apps, and fields to describe deliberate useragent manipulation situations (Anonymization, Hackers, etc.) Note that not all fields are always available. So if you look at a specific field you will in general find null values and “Unknown” in there as well.</description></item><item><title>Performance</title><link>/expect/performance/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/expect/performance/index.html</guid><description>On my systems I see a speed ranging from 500 to 4000 useragents per second (depending on the length and ambiguities in the useragent). On average the speed is around 2000 per second or ~0.5ms each. A LRU cache is in place that does over 1M per second if they are in the cache.
Please note that the current system take approx 220MiB of RAM just for the engine (without any caching!!).</description></item><item><title>Limitations</title><link>/expect/limitations/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/expect/limitations/index.html</guid><description>It only analyzes the provided string This system is based on analyzing the useragent string and looking for the patterns in the useragent string as they have been defined by parties like Google, Microsoft, Samsung and many others. These have been augmented with observations how developers apparently do things. There are really no (ok, very limited) lookup tables that define if a certain device name is a Phone or a Tablet. This makes this system very maintainable because there is no need to have a list of all possible devices.</description></item><item><title>Manipulations</title><link>/expect/manipulations/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/expect/manipulations/index.html</guid><description>Privacy Useragents have had a lot of information about the device and the browser in it. This has been so detailled in the past that there were many situations where the useragents could be used for tracking visitors very reliably.
Reducing/Freezing the UserAgent So a few years ago in several browsers projects started to reduce the level of information in the UserAgent. As a direct consequence the analysis results will become less usefull over time as browsers will start taking away more and more information.</description></item><item><title>Try it!</title><link>/expect/tryit/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/expect/tryit/index.html</guid><description>You can try it online with your own browser here: https://try.yauaa.basjes.nl/.
NOTES
This runs on a very slow and rate limited machine. If you really like this then run it on your local systems. It’s much faster that way. A Kubernetes ready Docker image is provided. See this page about the WebServlet for more information.</description></item></channel></rss>